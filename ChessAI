import copy

class ChessBoard:
    def __init__(self):
        self.board = [["--" for _ in range(8)] for _ in range(8)]
        
        self.board[0] = ["wR", "wN", "wB", "wQ", "wK", "wB", "wN", "wR"]
        self.board[1] = ["wP" for _ in range(8)]
        self.board[6] = ["bP" for _ in range(8)]
        self.board[7] = ["bR", "bN", "bB", "bQ", "bK", "bB", "bN", "bR"]

def print_board(board):
    for row in range(8):
        print("\n|", end="")
        for column in range(8):
            if board.board[7 - row][column] == "wP":
                print('\u265F', end=" |")
            elif board.board[7 - row][column] == "wR":
                print('\u265C', end=" |")
            elif board.board[7 - row][column] == "wN":
                print('\u265E', end=" |")
            elif board.board[7 - row][column] == "wB":
                print('\u265D', end=" |")
            elif board.board[7 - row][column] == "wK":
                print('\u265A', end=" |")
            elif board.board[7 - row][column] == "wQ":
                print('\u265B', end=" |")
            elif board.board[7 - row][column] == "bP":
                print('\u2659', end=" |")
            elif board.board[7 - row][column] == "bR":
                print('\u2656', end=" |")
            elif board.board[7 - row][column] == "bN":
                print('\u2658', end=" |")
            elif board.board[7 - row][column] == "bB":
                print('\u2657', end=" |")
            elif board.board[7 - row][column] == "bK":
                print('\u2654', end=" |")   
            elif board.board[7 - row][column] == "bQ":
                print('\u2655', end=" |")
            else:
                print('\u25A1', end=" |")
    print("\n")

def valid(column, row, target_column, target_row, turn, board):
    piece = board.board[row][column]
    target_piece = board.board[target_row][target_column]
    if piece[0] != turn[0] or target_piece[0] == turn[0]:
        return False
    if row == target_row and column == target_column:
        return False
    if piece[1] == "R":
        if row == target_row:
            if target_column > column:
                for i in range(column + 1, target_column):
                    if board.board[row][i] != "--":
                        return False
                return True
            else:
                for i in range(target_column + 1, column):
                    if board.board[row][i] != "--":
                        return False
                return True
        elif column == target_column:
            if target_row > row:
                for i in range(row + 1, target_row):
                    if board.board[i][column] != "--":
                        return False
                return True
            else:
                for i in range(target_row + 1, row):
                    if board.board[i][column] != "--":
                        return False
                return True
        else:
            return False
    elif piece[1] == "N":
        if (row != target_row and column != target_column and 
           (abs(row - target_row) + abs(column - target_column)) == 3):
            return True
        else:
            return False
    elif piece[1] == "B":
        if abs(target_column - column) == abs(target_row - row):
            if target_column > column:
                if target_row > row:
                    for i in range(1, target_column - column):
                        if board.board[row + i][column + i] != '--':
                            return False
                    return True
                elif target_row < row:
                    for i in range(1, target_column - column):
                        if board.board[row - i][column + i] != '--':
                            return False
                    return True
            elif target_column < column:
                if target_row > row:
                    for i in range(1, column - target_column):
                        if board.board[row + i][column - i] != '--':
                            return False
                    return True
                elif target_row < row:
                    for i in range(1, column - target_column):
                        if board.board[row - i][column - i] != '--':
                            return False
                    return True
        else:
            return False
    elif piece[1] == "Q":
        if row == target_row:
            if target_column > column:
                for i in range(column + 1, target_column):
                    if board.board[row][i] != "--":
                        return False
                return True
            else:
                for i in range(target_column + 1, column):
                    if board.board[row][i] != "--":
                        return False
                return True
        elif column == target_column:
            if target_row > row:
                for i in range(row + 1, target_row):
                    if board.board[i][column] != "--":
                        return False
                return True
            else:
                for i in range(target_row + 1, row):
                    if board.board[i][column] != "--":
                        return False
                return True
        elif abs(target_column - column) == abs(target_row - row):
            if target_column > column:
                if target_row > row:
                    for i in range(1, target_column - column):
                        if board.board[row + i][column + i] != '--':
                            return False
                    return True
                elif target_row < row:
                    for i in range(1, target_column - column):
                        if board.board[row - i][column + i] != '--':
                            return False
                    return True
            elif target_column < column:
                if target_row > row:
                    for i in range(1, column - target_column):
                        if board.board[row + i][column - i] != '--':
                            return False
                    return True
                elif target_row < row:
                    for i in range(1, column - target_column):
                        if board.board[row - i][column - i] != '--':
                            return False
                    return True
        else:
            return False
    elif piece[1] == "K":
        if abs(column - target_column) > 1 or abs(row - target_row) > 1:
            if abs(column - target_column) == 2 and row == target_row:
                if turn == "white":
                    if row == 0 and column == 4:
                        if target_column > column:
                            if board.board[0][5] == "--" and board.board[0][6] == "--" and board.board[0][7] == "wR":
                                board.board[0][5] = "wR"
                                board.board[0][7] = "--"
                                return True
                        elif target_column < column:
                            if board.board[0][3] == "--" and board.board[0][2] == "--" and board.board[0][1] == "--" and board.board[0][0] == "wR":
                                board.board[0][3] = "wR"
                                board.board[0][1] = "--"
                                board.board[0][0] = "--"
                                return True
                elif turn == "black":
                    if row == 7 and column == 4:
                        if target_column > column:
                            if board.board[7][5] == "--" and board.board[7][6] == "--" and board.board[7][7] == "wR":
                                board.board[7][5] = "wR"
                                board.board[7][7] = "--"
                                return True
                        elif target_column > column:
                            if board.board[7][3] == "--" and board.board[7][2] == "--" and board.board[7][1] == "--" and board.board[7][0] == "wR":
                                board.board[7][3] = "wR"
                                board.board[7][1] = "--"
                                board.board[7][0] = "--"
                                return True
            return False
        return True
    elif piece[1] == "P":
        if column == target_column:
            if target_piece != "--":
                    return False
            if turn == "white":
                if target_row - row == 1:
                    return True
                elif target_row - row == 2 and row == 1 and board.board[row + 1][column] == "--":
                    return True
                else:
                    return False
            elif turn == "black":
                if row - target_row == 1:
                    return True
                elif row - target_row == 2 and row == 6 and board.board[row + 1][column] == "--":
                    return True
                else:
                    return False
        elif abs(column - target_column) == 1:
            if target_piece == "--":
                return False
            if turn == "white":
                if target_row - row != 1:
                    return False
                return True
            elif turn == "black":
                if row - target_row != 1:
                    return False
                return True
        else:
            return False

def check(turn, board):
    if turn == "white":
        oponent = "black"
    else:
        oponent = "white"
    for k in range(8):
        for l in range(8):
            if board.board[l][k][0] == turn[0] and board.board[l][k][1] == "K":
                for i in range(8):
                    for j in range(8):
                        if valid(i, j, k, l, oponent, board):
                                return True
    return False

def checkmate(turn, board):
    columns = ["a", "b", "c", "d", "e", "f", "g", "h"]
    tempboard = ChessBoard()
    for i in range(8):
        for j in range(8):
            piece = board.board[j][i]
            if piece[0] == turn[0]:
                for k in range(8):
                    for l in range(8):
                        if valid(i, j, k, l, turn, board):
                            tempboard.board = copy.deepcopy(board.board)
                            make_move(columns[i], j + 1, columns[k], l + 1, turn, tempboard)
                            if not check(turn, tempboard):
                                return False
    return True



def forced_mate(turn, board, mate_in):
    columns = ["a", "b", "c", "d", "e", "f", "g", "h"]
    if turn == "white":
        oponent = "black"
    else:
        oponent = "white"
    tempboard = ChessBoard()
    if mate_in == 0:
        return False
    else:
        for i in range(8):
            for j in range(8):
                if board.board[j][i][0] == oponent[0]:
                    for k in range(8):
                        for l in range(8):
                            if valid(i, j, k, l, oponent, board):
                                tempboard.board = copy.deepcopy(board.board)
                                make_move(columns[i], j + 1, columns[k], l + 1, oponent, tempboard)
                                if checkmate(turn, tempboard):
                                    return True
    return False

def evaluate(turn, board):
    if turn == "white":
        oponent = "black"
    else:
        oponent = "white"
    white = 0
    black = 0
    mate_in = 1
    if checkmate(oponent, board):
        if turn == "white":
            white += 10000
        else:
            black += 10000
    if False:
        if forced_mate(turn, board, mate_in) :
            if turn == "black":
                black -= 10000
            else:
                white -= 10000
    for row in range(8):
        for column in range(8):
            piece = board.board[row][column]
            if piece[0] == "w":
                white += 20 - abs(4 - row) - abs(4 - column)
                if piece[1] == "P":
                    white += 100
                elif piece[1] == "N":
                    white += 300
                elif piece[1] == "B":
                    white += 320
                elif piece[1] == "R":
                    white += 500
                elif piece[1] == "Q":
                    white += 1000
                elif piece[1] == "K":
                    white += 10000
            elif piece[0] == "b":
                black += 20 - abs(5 - row) - abs(4 - column)
                if piece[1] == "P":
                    black += 100
                elif piece[1] == "N":
                    black += 300
                elif piece[1] == "B":
                    black += 320
                elif piece[1] == "R":
                    black += 500
                elif piece[1] == "Q":
                    black += 1000
                elif piece[1] == "K":
                    black += 10000
        if False:
            for column in range(8):
                for row in range(8):
                    if board.board[row][column][0] == oponent[0]:
                        for target_column in range(8):
                            for target_row in range(8):
                                if valid(column, row, target_column, target_row, oponent, board):
                                    if board.board[target_row][target_column][1] == "P":
                                        if turn == "black":
                                            black -= 100
                                        else:
                                            white -= 100
                                    elif board.board[target_row][target_column][1] == "N":
                                        if turn == "black":
                                            black -= 300
                                        else:
                                            white -= 300
                                    elif board.board[target_row][target_column][1] == "B":
                                        if turn == "black":
                                            black -= 320
                                        else:
                                            white -= 320
                                    elif board.board[target_row][target_column][1] == "R":
                                        if turn == "black":
                                            black -= 500
                                        else:
                                            white -= 500
                                    elif board.board[target_row][target_column][1] == "Q":
                                        if turn == "black":
                                            black -= 1000
                                        else:
                                            white -= 1000
                                    elif board.board[target_row][target_column][1] == "K":
                                        if turn == "black":
                                            black -= 10000
                                        else:
                                            white -= 10000
    for column in range(8):
        for row in range(8):
            if board.board[row][column][0] == turn[0]:
                for target_column in range(8):
                    for target_row in range(8):
                        if valid(column, row, target_column, target_row, turn, board):
                            if turn == "white":
                                white += target_row
                            else:
                                black += 7 - target_row
    if turn == "white":
        return white - black
    else:
        return black - white

def choose_best_move(turn, board, depth):
    if turn == "white":
        oponent = "black"
    else:
        oponent = "white"
    tempboard = ChessBoard()
    score = -99999
    columns = ["a", "b", "c", "d", "e", "f", "g", "h"]
    for x in range(8):
        i = columns[x]
        for j in range(1, 9):
            if board.board[j - 1][x][0] == turn[0]:
                for y in range(8):
                    k = columns[y]
                    for l in range(1, 9):
                        if board.board[l - 1][y][0] != turn[0]:
                            tempboard.board = copy.deepcopy(board.board)
                            if make_move(i, j, k, l, turn, tempboard):
                                if depth > 0:
                                    oponent_move = choose_best_move(oponent, tempboard, depth - 1)
                                    make_move(oponent_move[0], oponent_move[1], oponent_move[2], oponent_move[3], oponent, tempboard)
                                    new_score = evaluate(oponent, tempboard) * (-1)
                                else:
                                    new_score = evaluate(turn, tempboard)
                                if new_score > score:
                                    score = new_score
                                    column = i
                                    row = j
                                    target_column = k
                                    target_row = l
    move = (column, row, target_column, target_row)
    return move

def make_move(column, row, target_column, target_row, turn, board):
    row_index = row - 1
    target_row_index = target_row - 1
    columns = ["a", "b", "c", "d", "e", "f", "g", "h"]
    for i in range(8):
        if column == columns[i]:
            column_index = i
        if target_column == columns[i]:
            target_column_index = i
    piece = board.board[row_index][column_index]
    if valid(column_index, row_index, target_column_index, target_row_index, turn, board):
        board.board[row_index][column_index] = "--"
        if piece[1] == "P" and ((turn == "white" and target_row_index == 7) or (turn == "black" and target_row_index == 0)):
            if turn == "white":
                piece = "wQ"
            else:
                piece = "bQ"
        board.board[target_row_index][target_column_index] = piece
        return True
    else:
        return False

def player_move(board):
    global turn
    turn = "white"
    while True:
        try:
            move = input(" Make a move: ")
            if move == "O-O" and board.board[0][4] == "bK" and board.board[0][5] == "--" and board.board[0][6] == "--" and board.board[0][7] == "bR":
                board.board[0][6] = "bK"
                board.board[0][5] = "bR"
                board.board[0][7] = "--"
                board.board[0][4] = "--"
                return
            if make_move(move[0], int(move[1]), move[3], int(move[4]), turn, board):
                break
        except KeyboardInterrupt:
            print("Player resigned!")
            exit()
        except:
            pass

def engine_move(board, depth):
    global turn
    turn = "black"
    while True:
        move = choose_best_move(turn, board, depth)
        make_move(move[0], move[1], move[2], move[3], turn, board)
        print(f"{move[0]}{move[1]} {move[2]}{move[3]}")
        break
      
def main():
    board = ChessBoard()
    over = False
    dificulty = 1
    depth = (2 * dificulty) - 1
    while not over:
        positions = []
        oponent_positions = []
        kings = 0
        print_board(board)
        player_move(board)
        if turn == "white":
            oponent = "black"
        else:
            oponent = "white"
        for row in range(8):
            for column in range(8):
                if board.board[row][column][1] == "K":
                    kings += 1
                if board.board[row][column][0] == oponent[0]:
                    positions.append((row, column))
                elif board.board[row][column][0] == turn[0]:
                    oponent_positions.append((row, column))
        engine_move(board, depth)
        if kings < 2:
            over = True
            print_board(board)
    print("checkmate!")
    exit()

main()
